version: "3.8"
services:
  proxy:
    # ports:
    #   - "${DOMAIN_PORT?80}:80"
    #   - "8080"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
      - --api.dashboard=true
    labels:
      - traefik.enable=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80
    network_mode: service:tailscale
    networks:
      - "${TRAEFIK_PUBLIC_NETWORK?Variable not set}"
      - default

  db:
    ports:
      - "5432"

  queue:
    image: rabbitmq:3-management
    ports:
      - "5672"
      - "15672"

  backend:
    volumes:
      - ./backend/grid:/app/grid
      - ../syft:/app/syft
      - ../../notebooks:/notebooks
      - ./data/package-cache:/root/.cache

    environment:
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      - SYFT_USE_UVLOOP=0
      - DOMAIN_NAME=${DOMAIN_NAME?Variable not set}
      - NODE_TYPE=${NODE_TYPE?Variable not set}
      - PORT=8001
    build:
      context: ../
      dockerfile: ./grid/backend/backend.dockerfile
      target: "backend"
    # command: bash -c "while true; do sleep 1; done" # Infinite loop to keep container live doing nothing
    command: /start-reload.sh
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`) # WARNING: this wont match /api/v1/syft/stream because of length
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=8001
    network_mode: service:proxy

  backend_stream:
    depends_on:
      - db
      - backend
    volumes:
      - ./backend/grid:/app/grid
      - ../syft:/app/syft
      - ./data/package-cache:/root/.cache
    environment:
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      - SYFT_USE_UVLOOP=0
      - DOMAIN_NAME=${DOMAIN_NAME?Variable not set}
      - NODE_TYPE=${NODE_TYPE?Variable not set}
      - STREAM_QUEUE=1
      - PORT=8011
    build:
      context: ../
      dockerfile: ./grid/backend/backend.dockerfile
      target: "backend"
    # command: bash -c "while true; do sleep 1; done" # Infinite loop to keep container live doing nothing
    command: "waitforit -address=http://localhost:8001/api/v1/syft/metadata -status=200 -timeout=600 -- /start-reload.sh"
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-stream-http.rule=PathPrefix(`/api`) && PathPrefix(`/api/v1/syft/stream`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`) # WARNING: this only matches /api/v1/syft/stream because of length
      - traefik.http.services.${STACK_NAME?Variable not set}-backend-stream.loadbalancer.server.port=8011
    network_mode: service:proxy

  celeryworker:
    depends_on:
      - backend
    volumes:
      - ./backend/grid:/app/grid #- ./backend/app:/app
      - ../syft:/app/syft #- ../syft:/app/syft
      - ../../notebooks:/notebooks
      - ./data/package-cache:/root/.cache
    environment:
      - RUN=celery worker -A grid.worker -l info -Q main-queue -c 1
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      - SYFT_USE_UVLOOP=0
      - DOMAIN_NAME=${DOMAIN_NAME?Variable not set}
      - C_FORCE_ROOT=1
    build:
      context: ../
      dockerfile: ./grid/backend/backend.dockerfile
      target: "backend"
    command: "waitforit -address=http://localhost:8001/api/v1/syft/metadata -status=200 -timeout=600 -- /worker-start.sh"
    network_mode: service:proxy

  frontend:
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
      args:
        FRONTEND_ENV: ${FRONTEND_ENV-development}
        TYPE: ${NODE_TYPE?Variable not set}
    volumes:
      - ./frontend/src:/app/src
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

  tailscale:
    hostname: ${DOMAIN_NAME?Variable not set}
    image: "${DOCKER_IMAGE_TAILSCALE?Variable not set}:${VERSION-latest}"
    build:
      context: ./vpn
      dockerfile: tailscale.dockerfile
    environment:
      - HOSTNAME=${DOMAIN_NAME?Variable not set}
    volumes:
      - tailscale-data:/var/lib/tailscale
      - "/dev/net/tun:/dev/net/tun" # Required for tailscale to work
    cap_add: # Required for tailscale to work
      - net_admin
      - sys_module
    ports:
      - "${DOMAIN_PORT?80}:80"
      - "41641/udp"
      - "4000"

  headscale:
    profiles:
      - network
    hostname: headscale
    image: "${DOCKER_IMAGE_HEADSCALE?Variable not set}:${VERSION-latest}"
    build:
      context: ./vpn
      dockerfile: headscale.dockerfile
    volumes:
      - headscale-data:/headscale/data
    environment:
      - NETWORK_NAME=omnet
    ports:
      - "4000"
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-vpn-http.rule=PathPrefix(`/vpn`)
      - "traefik.http.routers.${STACK_NAME?Variable not set}-vpn-http.middlewares=${STACK_NAME?Variable not set}-vpn-http-stripprefix"
      - "traefik.http.middlewares.${STACK_NAME?Variable not set}-vpn-http-stripprefix.stripprefix.prefixes=/vpn"
      - traefik.http.services.${STACK_NAME?Variable not set}-vpn.loadbalancer.server.port=8080

  docker-host:
    depends_on:
      - proxy
      - pgadmin
      - db
      - flower
      - queue
      - backend
      - backend_stream
      - celeryworker
      - frontend
      - tailscale
      - headscale
    image: qoomon/docker-host
    cap_add:
      - net_admin
      - net_raw
    mem_limit: 8M
    restart: always

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false

volumes:
  tailscale-data:
  headscale-data:
